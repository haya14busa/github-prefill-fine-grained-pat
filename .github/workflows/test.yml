name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-bookmarklet:
    name: Test Bookmarklet
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build bookmarklet
      run: npm run build
    
    - name: Check if bookmarklet builds successfully
      run: |
        if [ ! -f "dist/bookmarklet.min.js" ]; then
          echo "Bookmarklet build failed!"
          exit 1
        fi
        echo "Bookmarklet built successfully"

  test-cli:
    name: Test CLI
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        deno-version: ['1.x', 'canary']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ matrix.deno-version }}
    
    - name: Check formatting
      working-directory: ./cli
      run: deno task fmt:check
      if: matrix.os == 'ubuntu-latest' && matrix.deno-version == '1.x'
    
    - name: Run linter
      working-directory: ./cli
      run: deno task lint
      if: matrix.os == 'ubuntu-latest' && matrix.deno-version == '1.x'
    
    - name: Type check
      working-directory: ./cli
      run: deno task type-check
    
    - name: Run tests
      working-directory: ./cli
      run: deno task test
    
    - name: Generate test coverage
      working-directory: ./cli
      run: deno task test:coverage
      if: matrix.os == 'ubuntu-latest' && matrix.deno-version == '1.x'
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./cli/coverage
        flags: cli
      if: matrix.os == 'ubuntu-latest' && matrix.deno-version == '1.x'
    
    - name: Test CLI execution
      working-directory: ./cli
      run: |
        deno run --allow-read --allow-run src/main.ts --help
        deno run --allow-read --allow-run src/main.ts --name "Test Token" --permissions "contents:read"
    
    - name: Test compilation
      working-directory: ./cli
      run: deno task compile
      if: matrix.deno-version == '1.x'
    
    - name: Test compiled binary
      working-directory: ./cli
      run: |
        ./github-pat-cli --help
        ./github-pat-cli --name "Test Token" --permissions "contents:read"
      if: matrix.deno-version == '1.x' && matrix.os != 'windows-latest'
    
    - name: Test compiled binary (Windows)
      working-directory: ./cli
      run: |
        ./github-pat-cli.exe --help
        ./github-pat-cli.exe --name "Test Token" --permissions "contents:read"
      if: matrix.deno-version == '1.x' && matrix.os == 'windows-latest'
      shell: pwsh

  lint-yaml:
    name: Lint YAML files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Lint YAML files
      uses: ibiqlik/action-yamllint@v3
      with:
        config_data: |
          extends: default
          rules:
            line-length:
              max: 120
              level: warning
            comments:
              min-spaces-from-content: 1