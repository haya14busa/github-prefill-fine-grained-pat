name: tagpr and release

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write
  attestations: write

jobs:
  tagpr:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tagpr.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true
        
    - id: tagpr
      uses: Songmu/tagpr@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and release job only runs when tagpr creates a new tag
  build-and-release:
    needs: tagpr
    if: needs.tagpr.outputs.tag != ''
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.tagpr.outputs.tag }}
    
    - uses: aquaproj/aqua-installer@v4.0.2
      with:
        aqua_version: v2.53.3
    
    - name: Build for all platforms
      working-directory: ./cli
      run: |
        mkdir -p dist
        deno task compile:all
    
    - name: Create checksums
      working-directory: ./cli/dist
      run: |
        sha256sum github-pat-cli-* > checksums.txt
        cat checksums.txt
    
    - name: Generate build provenance attestations
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'cli/dist/github-pat-cli-*'
    
    - name: Generate checksums attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'cli/dist/checksums.txt'
    
    - name: Check for binstaller config
      id: check-config
      run: |
        if [ -f ".config/binstaller.yml" ]; then
          echo "config_exists=true" >> $GITHUB_OUTPUT
        else
          echo "config_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - uses: actionutils/trusted-tag-verifier@v0
      if: steps.check-config.outputs.config_exists == 'true'
      with:
        verify: 'binary-install/setup-x@v1'
    
    - name: Install binstaller
      if: steps.check-config.outputs.config_exists == 'true'
      uses: binary-install/setup-x@v1
      with:
        script_url: https://raw.githubusercontent.com/binary-install/binstaller/main/install.sh
        gh_attestations_verify_flags: --repo binary-install/binstaller --cert-identity-regex=.github/workflows/generate-installer.yml@refs/heads/main
    
    - name: Embed checksums
      if: steps.check-config.outputs.config_exists == 'true'
      working-directory: ./
      run: binst embed-checksums --mode=checksum-file --file=./cli/dist/checksums.txt --version='${{ needs.tagpr.outputs.tag }}'
    
    - name: Generate installer
      if: steps.check-config.outputs.config_exists == 'true'
      run: binst gen --target-version='${{ needs.tagpr.outputs.tag }}' --output=./cli/dist/install.sh
    
    - name: Attest installer
      if: steps.check-config.outputs.config_exists == 'true'
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: ./cli/dist/install.sh
    
    - name: Upload release assets and publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
        TAG: ${{ needs.tagpr.outputs.tag }}
      run: |
        # Upload all CLI binaries, checksums, and installer script to the draft release
        gh release upload "${TAG}" cli/dist/github-pat-cli-* cli/dist/checksums.txt cli/dist/install.sh || true
        
        # Get current release body
        current_body=$(gh release view "${TAG}" --json body -q .body)
        
        # Create complete release notes with installation instructions and attestation info
        cat << EOF > complete_release_notes.md
        ${current_body}
        
        ## CLI Installation
        
        ### Quick install (recommended)
        
        Using the installer script:
        \`\`\`bash
        curl -fsSL https://github.com/${GH_REPO}/releases/download/${TAG}/install.sh | sh
        \`\`\`
        
        Or download and run:
        \`\`\`bash
        curl -fsSL -o install.sh https://github.com/${GH_REPO}/releases/download/${TAG}/install.sh
        chmod +x install.sh
        ./install.sh
        \`\`\`
        
        ### Using Deno
        \`\`\`bash
        deno install --allow-read --allow-run -n github-pat-cli \\
          https://raw.githubusercontent.com/${GH_REPO}/${TAG}/cli/src/main.ts
        \`\`\`
        
        
        ### Using precompiled binaries
        
        Download the appropriate binary for your platform and architecture:
        
        **Windows:**
        - x64: \`github-pat-cli-x86_64-pc-windows-msvc.exe\`
        
        **macOS:**
        - Intel (x64): \`github-pat-cli-x86_64-apple-darwin\`
        - Apple Silicon (ARM64): \`github-pat-cli-aarch64-apple-darwin\`
        
        **Linux:**
        - x64: \`github-pat-cli-x86_64-unknown-linux-gnu\`
        - ARM64: \`github-pat-cli-aarch64-unknown-linux-gnu\`
        
        Make it executable (Linux/macOS):
        \`\`\`bash
        chmod +x github-pat-cli-*
        \`\`\`
        
        ## Checksums
        
        See \`checksums.txt\` for SHA256 checksums of all binaries.
        
        ## Verify Build Provenance
        
        All release artifacts include build provenance attestations. You can verify them using the GitHub CLI:
        
        \`\`\`bash
        # Verify a specific binary
        gh attestation verify github-pat-cli-x86_64-pc-windows-msvc.exe \\
          --repo ${GH_REPO}
        
        # Verify checksums file
        gh attestation verify checksums.txt \\
          --repo ${GH_REPO}
        
        # Verify installer script
        gh attestation verify install.sh \\
          --repo ${GH_REPO}
        \`\`\`
        
        Learn more about [artifact attestations](https://docs.github.com/en/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
        EOF
        
        # Update and publish the release
        gh release edit "${TAG}" \
          --draft=false \
          --notes-file complete_release_notes.md